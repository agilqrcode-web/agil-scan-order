import React, { useEffect, useState, useCallback, useRef } from 'react';
import { createClient, SupabaseClient, RealtimeChannel } from '@supabase/supabase-js';
import { useAuth } from '@clerk/clerk-react';
import { SupabaseContext } from "@/contexts/SupabaseContext";
import { Spinner } from '@/components/ui/spinner';
import type { Database } from '../integrations/supabase/types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL!;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY!;

// Fun√ß√£o utilit√°ria para introduzir um pequeno delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export function SupabaseProvider({ children }: { children: React.ReactNode }) {
    const { getToken, isLoaded, isSignedIn } = useAuth();

    const [supabaseClient, setSupabaseClient] = useState<SupabaseClient<Database> | null>(null);
    const [realtimeChannel, setRealtimeChannel] = useState<RealtimeChannel | null>(null);
    
    // --- Refs para gerenciar o estado da autentica√ß√£o e reconex√£o ---
    const isRefreshingRef = useRef<boolean>(false);
    const reconnectTimerRef = useRef<number | null>(null);
    const reconnectAttemptsRef = useRef<number>(0);
    const authFnRef = useRef<((client: SupabaseClient<Database>) => Promise<void>) | null>(null);

    // Fun√ß√£o central para autenticar (ou re-autenticar) o canal Realtime
    const setRealtimeAuth = useCallback(async (client: SupabaseClient<Database>) => {
        if (isRefreshingRef.current) {
            console.log('[AUTH] ‚è≥ Autentica√ß√£o j√° em progresso. Pulando.');
            return;
        }
        isRefreshingRef.current = true;
        console.log('[AUTH] 3. Processo de autentica√ß√£o do canal iniciado.');

        try {
            if (!client || !isSignedIn) {
                try { await client?.realtime.setAuth(null); } catch {}
                realtimeChannel?.unsubscribe();
                return;
            }

            console.log('[AUTH] --> Pedindo novo token ao Clerk...');
            const token = await getToken({ template: 'supabase' }); 

            if (!token) {
                console.warn('[AUTH] --> Token nulo recebido do Clerk. Limpando autentica√ß√£o.');
                await client.realtime.setAuth(null);
                realtimeChannel?.unsubscribe();
                return;
            }
            
            console.log('[AUTH] --> Token novo recebido. Enviando para o Supabase...');
            await client.realtime.setAuth(token);
            console.log('[AUTH] ----> Supabase aceitou o novo token. (SUCESSO)');

            // >>> CORRE√á√ÉO DO ERRO E FOR√áA DA RE-INSCRI√á√ÉO AP√ìS RENOVA√á√ÉO <<<
            if (realtimeChannel) {
                // Desinscreve-se e re-inscreve para garantir que o novo token seja usado pelo canal.
                // √â necess√°rio um pequeno delay entre unsubscribe e subscribe.
                if (realtimeChannel.state === 'subscribed') {
                    realtimeChannel.unsubscribe();
                    await delay(50); // Delay de 50ms para garantir que o comando unsubscribe seja processado.
                    console.log('[AUTH] ----> Canal Realtime for√ßado a re-inscrever com novo token.');
                }
                realtimeChannel.subscribe();
            }

        } catch (e) {
            console.error('[AUTH] ‚ÄºÔ∏è Erro durante o fluxo de autentica√ß√£o:', e);
        } finally {
            isRefreshingRef.current = false;
        }
    }, [isSignedIn, getToken, realtimeChannel]); // Adicionado realtimeChannel nas depend√™ncias

    // Atualiza a ref da fun√ß√£o de autentica√ß√£o a cada render
    useEffect(() => {
        authFnRef.current = setRealtimeAuth;
    });

    // Effect 1: Create Client (Cria√ß√£o do Cliente Supabase)
    useEffect(() => {
        if (isLoaded && !supabaseClient) {
            console.log('[PROVIDER-INIT] ‚öôÔ∏è 1. Clerk carregado. Criando cliente Supabase.');
            const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
                global: {
                    fetch: async (input, init) => {
                        const token = await getToken();
                        const headers = new Headers(init?.headers);
                        if (token) headers.set('Authorization', `Bearer ${token}`);
                        return fetch(input, { ...init, headers });
                    },
                },
            });
            setSupabaseClient(client);
        }
    }, [isLoaded, getToken, supabaseClient]);

    // Effect 2: Reactive Channel & Auth Lifecycle (Gerencia a vida do Canal e Rea√ß√µes a Erros)
    useEffect(() => {
        if (!supabaseClient || !isLoaded) {
            return;
        }
        
        // >>> CORRE√á√ÉO DO LOOP: IMPEDE A RE-CRIA√á√ÉO DESNECESS√ÅRIA <<<
        if (realtimeChannel) {
            // Se o canal j√° existe, pulamos a cria√ß√£o e configura√ß√£o.
            return;
        }

        console.log('[LIFECYCLE] üöÄ 2. Cliente Supabase pronto. Iniciando ciclo de vida do canal...');
        const channel = supabaseClient.channel('public:orders');

        const handleRecovery = (reason: 'CLOSED' | 'ERROR') => {
            if (reconnectTimerRef.current) clearTimeout(reconnectTimerRef.current);
            
            const attempts = reconnectAttemptsRef.current;
            const delayTime = Math.min(1000 * (2 ** attempts), 30000);
            console.log(`[LIFECYCLE] üîÑ Tentando recuperar conex√£o em ${delayTime / 1000}s (tentativa ${attempts + 1}). Motivo: ${reason}`);
            
            reconnectTimerRef.current = window.setTimeout(() => {
                reconnectAttemptsRef.current = attempts + 1;
                console.log('[LIFECYCLE] --> Etapa 1: Re-autenticando e re-inscrevendo o canal...');
                
                // For√ßa a re-autentica√ß√£o, que agora cont√©m a l√≥gica de re-inscri√ß√£o for√ßada
                authFnRef.current?.(supabaseClient);
                
            }, delayTime);
        };

        channel.on('SUBSCRIBED', () => {
            console.log(`[LIFECYCLE] ‚úÖ SUCESSO! Inscri√ß√£o no canal '${channel.topic}' confirmada.`);
            if (reconnectTimerRef.current) clearTimeout(reconnectTimerRef.current);
            reconnectAttemptsRef.current = 0;
        });

        channel.on('CLOSED', () => {
            console.warn(`[LIFECYCLE] ‚ùå ATEN√á√ÉO: Canal fechado. Acionando l√≥gica de recupera√ß√£o autom√°tica.`);
            handleRecovery('CLOSED');
        });

        channel.on('error', (error) => {
            console.error('[LIFECYCLE] üí• OCORREU UM ERRO NO CANAL:', error);
            handleRecovery('ERROR');
        });

        setRealtimeChannel(channel);

        console.log('[LIFECYCLE] --> Disparando autentica√ß√£o inicial.');
        authFnRef.current?.(supabaseClient);

        return () => {
            console.log('[LIFECYCLE] üßπ Limpando... Removendo canal e timers.');
            if (reconnectTimerRef.current) clearTimeout(reconnectTimerRef.current);
            supabaseClient.removeChannel(channel); 
            // O setRealtimeChannel(null) √© omitido para permitir que o useEffect 2 detecte o estado nulo e se re-execute se necess√°rio.
        };
    }, [supabaseClient, isLoaded, setRealtimeAuth, realtimeChannel]); // Adicionei realtimeChannel

    // Effect 3: Renova√ß√£o Proativa do Token (A SOLU√á√ÉO CONTRA A EXPIRA√á√ÉO)
    useEffect(() => {
        if (!supabaseClient || !isSignedIn) {
            return;
        }

        const RENEW_INTERVAL_MS = 30 * 60 * 1000; // 30 minutos

        const renewAuth = () => {
            console.log('[AUTH-INTERVAL] ‚è±Ô∏è Renova√ß√£o peri√≥dica agendada acionada. For√ßando novo token.');
            authFnRef.current?.(supabaseClient); 
        };

        // O delay garante que a primeira execu√ß√£o proativa n√£o conflite com a autentica√ß√£o inicial do useEffect 2
        const initialTimer = window.setTimeout(() => {
            renewAuth();
            const intervalId = window.setInterval(renewAuth, RENEW_INTERVAL_MS);
            return () => {
                console.log('[AUTH-INTERVAL] üßπ Limpando intervalo de renova√ß√£o.');
                window.clearInterval(intervalId);
            };
        }, 5000); // Aguarda 5 segundos antes de iniciar o loop de renova√ß√£o.

        return () => {
            window.clearTimeout(initialTimer);
        };
    }, [supabaseClient, isSignedIn]);

    // Effect 4: The "Wake-Up Call"
    useEffect(() => {
        const handleVisibilityChange = () => {
            if (document.visibilityState === 'visible' && supabaseClient && isSignedIn) {
                console.log('üëÅÔ∏è Aba se tornou vis√≠vel. Verificando sa√∫de da conex√£o e token.');
                authFnRef.current?.(supabaseClient);
            }
        };
        document.addEventListener('visibilitychange', handleVisibilityChange);
        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, [supabaseClient, isSignedIn]);


    if (!supabaseClient || !realtimeChannel) {
        return (
            <div className="flex justify-center items-center h-screen">
                <Spinner size="large" />
            </div>
        );
    }

    return (
        <SupabaseContext.Provider value={{
            supabaseClient,
            realtimeChannel,
            realtimeAuthCounter: 0,
            requestReconnect: async () => { console.warn("requestReconnect is deprecated"); return false; },
            setRealtimeAuth: () => supabaseClient && authFnRef.current?.(supabaseClient),
        }}>
            {children}
        </SupabaseContext.Provider>
    );
}
