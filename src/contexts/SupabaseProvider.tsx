import React, { useEffect, useState, useCallback, useRef } from 'react';
import { createClient, SupabaseClient, RealtimeChannel } from '@supabase/supabase-js';
import { useAuth } from '@clerk/clerk-react';
import { SupabaseContext } from "@/contexts/SupabaseContext";
import { Spinner } from '@/components/ui/spinner';
import type { Database } from '../integrations/supabase/types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL!;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY!;

// ... (Fun√ß√µes utilit√°rias isBusinessHours, formatTime, getBusinessHoursStatus - OMITIDAS PARA BREVIDADE, MANTENHA O C√ìDIGO ANTERIOR AQUI) ...

const HEALTH_CHECK_INTERVAL = 5 * 60 * 1000;
const TOKEN_REFRESH_MARGIN = 15 * 60 * 1000; // 15 minutos
const MAX_RECONNECT_ATTEMPTS = 5;
const INITIAL_RECONNECT_DELAY = 1000;

// =============================================================================
// üèóÔ∏è COMPONENTE PRINCIPAL
// =============================================================================

// Fun√ß√£o utilit√°ria para introduzir um pequeno delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export function SupabaseProvider({ children }: { children: React.ReactNode }) {
    const { getToken, isLoaded, isSignedIn } = useAuth();

    const [supabaseClient, setSupabaseClient] = useState<SupabaseClient<Database> | null>(null);
    const [realtimeChannel, setRealtimeChannel] = useState<RealtimeChannel | null>(null);
    const [connectionHealthy, setConnectionHealthy] = useState<boolean>(false);
    const [realtimeAuthCounter, setRealtimeAuthCounter] = useState<number>(0);
    
    const isRefreshingRef = useRef<boolean>(false);
    const reconnectAttemptsRef = useRef<number>(0);
    const lastEventTimeRef = useRef<number>(Date.now());
    const isActiveRef = useRef<boolean>(true);
    const setRealtimeAuthRef = useRef<((client: SupabaseClient<Database>) => Promise<boolean>) | null>(null); // Retorna boolean para sucesso

    // ... (Log inicial de status de hor√°rios - MANTENHA O C√ìDIGO ANTERIOR AQUI) ...

    // ‚úÖ Fun√ß√£o otimizada para obter token com valida√ß√£o
    const getTokenWithValidation = useCallback(async () => {
        // ... (Implementa√ß√£o anterior - MANTENHA O C√ìDIGO ANTERIOR AQUI) ...
        try {
            const token = await getToken({ template: 'supabase' });
            if (!token) return null;

            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const exp = payload.exp * 1000;
                const remainingMinutes = Math.round((exp - Date.now()) / 1000 / 60);
                
                console.log(`[AUTH] Token expira em: ${remainingMinutes} minutos`);
                
                if (remainingMinutes < 5) console.warn('[AUTH] Token prestes a expirar');
                
                return token;
            } catch (parseError) {
                console.error('[AUTH] Erro ao parsear token:', parseError);
                return token;
            }
        } catch (error) {
            console.error('[AUTH] Erro ao obter token:', error);
            return null;
        }
    }, [getToken]);

    // Fun√ß√£o central: APENAS define o token de autentica√ß√£o no cliente
    const setRealtimeAuth = useCallback(async (client: SupabaseClient<Database>): Promise<boolean> => {
        if (isRefreshingRef.current) {
            console.log('[AUTH] ‚è≥ Autentica√ß√£o j√° em progresso');
            return false;
        }
        isRefreshingRef.current = true;

        try {
            if (!client || !isSignedIn) {
                try { 
                    await client?.realtime.setAuth(null); 
                    setConnectionHealthy(false);
                } catch {}
                return false;
            }

            const token = await getTokenWithValidation();
            if (!token) {
                await client.realtime.setAuth(null);
                setConnectionHealthy(false);
                return false;
            }
            
            // A √öNICA A√á√ÉO AQUI √â AUTENTICAR O CLIENTE
            await client.realtime.setAuth(token); 
            console.log('[AUTH] ‚úÖ Token aplicado com sucesso no cliente.');
            setConnectionHealthy(true);
            setRealtimeAuthCounter(prev => prev + 1);
            return true;
        } catch (error) {
            console.error('[AUTH] ‚ÄºÔ∏è Erro na autentica√ß√£o:', error);
            setConnectionHealthy(false);
            return false;
        } finally {
            isRefreshingRef.current = false;
        }
    }, [isSignedIn, getTokenWithValidation]);
    
    // NOVO: Fun√ß√£o para for√ßar a re-inscri√ß√£o do canal
    const forceChannelReconnect = useCallback(async (client: SupabaseClient<Database>, channel: RealtimeChannel, reason: 'PROACTIVE' | 'REACTIVE') => {
        console.log(`[RECONNECT] üß† ${reason} - For√ßando re-inscri√ß√£o do canal...`);

        // 1. Define o NOVO token no cliente (setAuth)
        const authSuccess = await setRealtimeAuth(client);
        
        if (!authSuccess) {
            console.warn('[RECONNECT] Falha ao obter ou aplicar novo token. Pulando re-inscri√ß√£o.');
            return;
        }

        // 2. Garante que o canal est√° limpo antes de re-inscrever
        if (channel.state === 'joined' || channel.state === 'joining' || channel.state === 'subscribed') {
            console.log('[RECONNECT] Desinscrevendo do canal...');
            channel.unsubscribe(); 
            await delay(100); // Pequeno delay para garantir o estado 'closed'
        }

        // 3. For√ßa a RE-INSCRI√á√ÉO. Isso obriga o servidor a revalidar o token.
        channel.subscribe((status) => {
            if (status === 'SUBSCRIBED') {
                console.log('[RECONNECT] ‚úÖ Sucesso: Canal re-inscrito com novo token.');
                reconnectAttemptsRef.current = 0;
            } else if (status === 'CHANNEL_ERROR') {
                 console.error('[RECONNECT] ‚ÄºÔ∏è Erro ao re-inscrever ap√≥s setAuth. Tentando novamente...');
                 // Aciona a l√≥gica de recupera√ß√£o reativa
                 if (reason === 'PROACTIVE') handleReconnect(channel); 
            }
        });
    }, [setRealtimeAuth]); // setRealtimeAuth √© uma depend√™ncia crucial

    // Atualiza a ref da fun√ß√£o de autentica√ß√£o
    useEffect(() => {
        setRealtimeAuthRef.current = setRealtimeAuth;
    });

    // ‚úÖ Backoff exponencial otimizado (L√ìGICA REATIVA: ap√≥s a queda)
    const handleReconnect = useCallback((channel: RealtimeChannel) => {
        if (!isActiveRef.current || !supabaseClient) return;
        
        if (reconnectAttemptsRef.current >= MAX_RECONNECT_ATTEMPTS) {
            console.warn('[RECONNECT] üõë M√°ximo de tentativas atingido');
            return;
        }

        const delayTime = INITIAL_RECONNECT_DELAY * Math.pow(2, reconnectAttemptsRef.current);
        reconnectAttemptsRef.current++;
        
        console.log(`[RECONNECT] üîÑ Tentativa ${reconnectAttemptsRef.current} em ${delayTime}ms (REATIVA)`);
        
        // Chamamos o forceChannelReconnect ap√≥s o delay de backoff
        setTimeout(() => {
            if (isActiveRef.current && supabaseClient) {
                forceChannelReconnect(supabaseClient, channel, 'REACTIVE');
            }
        }, delayTime);
    }, [supabaseClient, forceChannelReconnect]);


    // Effect 1: Create Client (SEM ALTERA√á√ÉO)
    useEffect(() => {
        // ... (Implementa√ß√£o anterior - MANTENHA O C√ìDIGO ANTERIOR AQUI) ...
        if (isLoaded && !supabaseClient) {
            const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
                global: {
                    fetch: async (input, init) => {
                        const token = await getToken();
                        const headers = new Headers(init?.headers);
                        if (token) headers.set('Authorization', `Bearer ${token}`);
                        return fetch(input, { ...init, headers });
                    },
                },
            });
            setSupabaseClient(client);
        }
    }, [isLoaded, getToken, supabaseClient]);

    // Effect 2: Canal RealTime (L√ìGICA REATIVA)
    useEffect(() => {
        if (!supabaseClient || !isLoaded || realtimeChannel) {
            return;
        }

        isActiveRef.current = true;
        console.log('[LIFECYCLE] üöÄ Iniciando canal realtime');
        const channel = supabaseClient.channel('public:orders');

        // ... (Handlers SUBSCRIBED, CLOSED, ERROR e postgres_changes - MANTENHA O C√ìDIGO ANTERIOR AQUI) ...
        // CLOSED E ERROR DEVEM CHAMAR handleReconnect(channel);

        channel.on('SUBSCRIBED', () => {
            if (!isActiveRef.current) return;
            console.log('[LIFECYCLE] ‚úÖ Canal inscrito com sucesso');
            setConnectionHealthy(true);
            lastEventTimeRef.current = Date.now();
            reconnectAttemptsRef.current = 0;
        });

        channel.on('CLOSED', (error) => {
            if (!isActiveRef.current) return;
            console.warn(`[LIFECYCLE] ‚ùå Canal fechado. Motivo: ${error?.reason || 'Desconhecido'}. Acionando reconex√£o reativa.`);
            setConnectionHealthy(false);
            handleReconnect(channel);
        });

        channel.on('error', (error) => {
            if (!isActiveRef.current) return;
            console.error('[LIFECYCLE] üí• Erro no canal:', error);
            setConnectionHealthy(false);
            handleReconnect(channel);
        });
        
        // Listener para eventos do banco (MANTENHA O C√ìDIGO ANTERIOR AQUI)

        // =========================================================================
        // üß† HEALTH CHECK INTELIGENTE COM GEST√ÉO DE HOR√ÅRIOS
        // =========================================================================
        const healthCheckInterval = setInterval(() => {
             // ... (L√≥gica de Health Check - MANTENHA O C√ìDIGO ANTERIOR AQUI) ...
             if (!isActiveRef.current) return;
            
             const timeSinceLastEvent = Date.now() - lastEventTimeRef.current;
             const isChannelSubscribed = channel.state === 'joined';
             const businessStatus = getBusinessHoursStatus();
             
             if (isChannelSubscribed && timeSinceLastEvent > 5 * 60 * 1000) {
                 if (businessStatus.isOpen) {
                     console.warn('[HEALTH-CHECK] ‚ö†Ô∏è Sem eventos h√° 5+ minutos durante hor√°rio comercial');
                     setConnectionHealthy(false);
                     // Recupera√ß√£o proativa via forceChannelReconnect
                     forceChannelReconnect(supabaseClient, channel, 'PROACTIVE');
                 } else {
                     console.log('[HEALTH-CHECK] üí§ Sem eventos - Comportamento normal (fora do hor√°rio comercial)');
                 }
             }
        }, HEALTH_CHECK_INTERVAL);


        // ‚úÖ Token Refresh Otimizado (L√ìGICA PROATIVA)
        const tokenRefreshInterval = setInterval(() => {
            if (!isActiveRef.current || !isSignedIn || !supabaseClient) return;
            
            // CHAMA A FUN√á√ÉO QUE FOR√áA setAuth + unsubscribe + subscribe
            console.log('[TOKEN-REFRESH] üîÑ Refresh PROATIVO (15min). For√ßando re-inscri√ß√£o.');
            forceChannelReconnect(supabaseClient, channel, 'PROACTIVE');
        }, TOKEN_REFRESH_MARGIN);


        setRealtimeChannel(channel);
        forceChannelReconnect(supabaseClient, channel, 'PROACTIVE'); // Inscri√ß√£o inicial for√ßada

        return () => {
            console.log('[LIFECYCLE] üßπ Limpando recursos');
            isActiveRef.current = false;
            clearInterval(healthCheckInterval);
            clearInterval(tokenRefreshInterval);
            supabaseClient.removeChannel(channel); 
            setRealtimeChannel(null);
            setConnectionHealthy(false);
        };
    }, [supabaseClient, isLoaded, isSignedIn, handleReconnect, realtimeChannel, forceChannelReconnect]);

    // Effect 3: Wake-Up Call (APENAS setAuth para economizar)
    useEffect(() => {
        const handleVisibilityChange = () => {
            if (document.visibilityState === 'visible' && supabaseClient && isSignedIn) {
                console.log('üëÅÔ∏è Aba vis√≠vel - verificando conex√£o (apenas setAuth)');
                // Apenas setAuth aqui deve ser suficiente, pois a visibilidade geralmente n√£o significa que o token expirou.
                setRealtimeAuthRef.current?.(supabaseClient); 
            }
        };
        document.addEventListener('visibilitychange', handleVisibilityChange);
        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, [supabaseClient, isSignedIn]);

    // Fun√ß√µes de Contexto
    const refreshConnection = useCallback(async () => {
        if (supabaseClient && realtimeChannel) {
            console.log('[RECONNECT] üîÑ Reconex√£o manual solicitada');
            forceChannelReconnect(supabaseClient, realtimeChannel, 'PROACTIVE');
        }
    }, [supabaseClient, realtimeChannel, forceChannelReconnect]);

    const requestReconnect = useCallback(async () => {
        await refreshConnection();
        return true;
    }, [refreshConnection]);

    if (!supabaseClient || !realtimeChannel) {
        // ... (Renderiza√ß√£o do Spinner)
    }

    return (
        <SupabaseContext.Provider value={{
            supabaseClient,
            realtimeChannel,
            connectionHealthy,
            realtimeAuthCounter,
            requestReconnect,
            setRealtimeAuth: () => supabaseClient && setRealtimeAuthRef.current?.(supabaseClient).then(() => {}), // Adapta√ß√£o para Promise<void>
            refreshConnection,
        }}>
           {/* ... (children e indicador visual) ... */}
        </SupabaseContext.Provider>
    );
}
