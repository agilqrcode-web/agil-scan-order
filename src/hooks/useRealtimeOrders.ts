// useRealtimeOrders.ts - VERS√ÉO CORRIGIDA
import { useCallback, useEffect, useRef, useState } from 'react';
import { useSupabase } from '@/contexts/SupabaseContext';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

const POLLING_INTERVAL = 2 * 60 * 1000; // 2 minutos

export function useRealtimeOrders() {
  const { realtimeChannel, connectionHealthy } = useSupabase();
  const queryClient = useQueryClient();
  const pollingIntervalRef = useRef<number>();
  const [hasRealTimeWorked, setHasRealTimeWorked] = useState(false);

  const handleNewNotification = useCallback((payload: any) => {
    console.log('[RT-NOTIFICATIONS] ‚úÖ Evento recebido:', payload);
    setHasRealTimeWorked(true); // ‚úÖ MARCA que RealTime funcionou
    
    toast.info("Novo pedido recebido!");
    queryClient.invalidateQueries({ queryKey: ['notifications', 'orders', 'orders-stats'] });
  }, [queryClient]);

  // Efeito 1: Configurar listeners do realtime
  useEffect(() => {
    if (!realtimeChannel) {
      console.log('[RT-HOOK] Canal realtime n√£o dispon√≠vel');
      return;
    }

    console.log('[RT-HOOK] ‚öìÔ∏è Configurando listeners realtime');

    const handler = (payload: any) => handleNewNotification(payload);

    realtimeChannel
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'orders' 
      }, handler)
      .subscribe();

    return () => {
      if (realtimeChannel) {
        console.log('[RT-HOOK] üßπ Limpando listeners');
        realtimeChannel.unsubscribe();
      }
    };
  }, [realtimeChannel, handleNewNotification]);

  // ‚úÖ Efeito 2: Polling INTELIGENTE - S√≥ ativa se RealTime nunca funcionou
  useEffect(() => {
    // ‚ö†Ô∏è N√ÉO ativar polling se:
    // - connectionHealthy √© true (RealTime est√° funcionando)  
    // - OU se RealTime j√° funcionou antes (hasRealTimeWorked)
    if (connectionHealthy || hasRealTimeWorked) {
      if (pollingIntervalRef.current) {
        console.log('[FALLBACK] ‚úÖ RealTime funcionando - desativando polling');
        clearInterval(pollingIntervalRef.current);
        pollingIntervalRef.current = undefined;
      }
      return;
    }

    // ‚úÖ S√≥ ativar polling se RealTime NUNCA funcionou
    if (!connectionHealthy && !hasRealTimeWorked) {
      console.log('[FALLBACK] üîÑ RealTime n√£o inicializou - ativando polling tempor√°rio');
      
      pollingIntervalRef.current = window.setInterval(() => {
        console.log('[FALLBACK] üì° Polling (aguardando RealTime)');
        queryClient.invalidateQueries({ queryKey: ['orders', 'notifications'] });
      }, POLLING_INTERVAL);

      return () => {
        if (pollingIntervalRef.current) {
          clearInterval(pollingIntervalRef.current);
          pollingIntervalRef.current = undefined;
        }
      };
    }
  }, [connectionHealthy, hasRealTimeWorked, queryClient]);

  return {
    connectionHealthy,
    isUsingFallback: !!pollingIntervalRef.current,
    hasRealTimeWorked
  };
}
