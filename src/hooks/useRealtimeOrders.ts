// useRealtimeOrders.ts - VERS√ÉO COMPLETA COM FALLBACK
import { useCallback, useEffect, useRef } from 'react';
import { useSupabase } from '@/contexts/SupabaseContext';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';

export function useRealtimeOrders() {
  const { realtimeChannel, connectionHealthy } = useSupabase();
  const queryClient = useQueryClient();
  const pollingIntervalRef = useRef<number>();
  const lastNotificationRef = useRef<number>(Date.now());

  const handleNewNotification = useCallback((payload: any) => {
    console.log('[RT-NOTIFICATIONS] New postgres_changes event received:', payload);
    lastNotificationRef.current = Date.now();
    
    toast.info("Novo pedido recebido!", {
      description: "Um novo pedido foi registrado e a lista ser√° atualizada.",
      action: {
        label: "Ver",
        onClick: () => {},
      },
    });

    // Invalidar queries relevantes
    queryClient.invalidateQueries({ queryKey: ['notifications'] });
    queryClient.invalidateQueries({ queryKey: ['orders'] });
    queryClient.invalidateQueries({ queryKey: ['orders-stats'] });
  }, [queryClient]);

  // Efeito 1: Configurar listeners do realtime
  useEffect(() => {
    if (!realtimeChannel) {
      console.log('[RT-HOOK] Canal realtime n√£o dispon√≠vel');
      return;
    }

    console.log('[RT-HOOK] ‚öìÔ∏è Anexando listeners de postgres_changes e iniciando inscri√ß√£o.');

    const handler = (payload: any) => handleNewNotification(payload);

    // A inscri√ß√£o s√≥ √© chamada AQUI, depois que o listener .on() foi registrado.
    realtimeChannel
      .on('postgres_changes', { event: '*', schema: 'public', table: 'orders' }, handler)
      .subscribe();

    // Cleanup: remove o listener e a inscri√ß√£o quando o componente desmontar.
    return () => {
      if (realtimeChannel) {
        console.log('[RT-HOOK] üßπ Limpando... Desinscrevendo e removendo listeners de notifica√ß√µes.');
        // O unsubscribe remove todos os listeners do canal automaticamente
        realtimeChannel.unsubscribe();
      }
    };
  }, [realtimeChannel, handleNewNotification]);

  // Efeito 2: Fallback com polling quando realtime n√£o est√° saud√°vel
  useEffect(() => {
    if (!connectionHealthy) {
      console.log('[FALLBACK] üîÑ Conex√£o realtime n√£o saud√°vel - ativando polling como fallback');
      
      // Polling imediato primeiro
      queryClient.invalidateQueries({ queryKey: ['orders'] });
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
      
      // Configurar polling peri√≥dico
      pollingIntervalRef.current = window.setInterval(() => {
        console.log('[FALLBACK] üì° Polling para atualiza√ß√µes de pedidos');
        queryClient.invalidateQueries({ queryKey: ['orders'] });
        queryClient.invalidateQueries({ queryKey: ['notifications'] });
        queryClient.invalidateQueries({ queryKey: ['orders-stats'] });
      }, 30000); // 30 segundos

      return () => {
        if (pollingIntervalRef.current) {
          console.log('[FALLBACK] üßπ Desativando polling');
          clearInterval(pollingIntervalRef.current);
          pollingIntervalRef.current = undefined;
        }
      };
    } else {
      // Conex√£o saud√°vel - desativar polling se estiver ativo
      if (pollingIntervalRef.current) {
        console.log('[FALLBACK] ‚úÖ Realtime recuperado - desativando polling');
        clearInterval(pollingIntervalRef.current);
        pollingIntervalRef.current = undefined;
        
        // For√ßar uma atualiza√ß√£o imediata ao voltar para realtime
        queryClient.invalidateQueries({ queryKey: ['orders'] });
        queryClient.invalidateQueries({ queryKey: ['notifications'] });
      }
    }
  }, [connectionHealthy, queryClient]);

  // Efeito 3: Health check adicional - verifica se estamos recebendo notifica√ß√µes
  useEffect(() => {
    const healthCheckInterval = window.setInterval(() => {
      const timeSinceLastNotification = Date.now() - lastNotificationRef.current;
      
      // Se n√£o recebemos notifica√ß√µes por mais de 2 minutos e a conex√£o est√° "saud√°vel"
      // pode indicar um falso positivo na sa√∫de da conex√£o
      if (connectionHealthy && timeSinceLastNotification > 120000) {
        console.warn('[HEALTH-CHECK] ‚ö†Ô∏è  Conex√£o marcada como saud√°vel mas sem notifica√ß√µes h√° 2 minutos');
        // Poderia for√ßar uma revalida√ß√£o aqui se necess√°rio
        queryClient.invalidateQueries({ queryKey: ['orders'] });
      }
    }, 60000); // Verificar a cada 1 minuto

    return () => {
      clearInterval(healthCheckInterval);
    };
  }, [connectionHealthy, queryClient]);

  return {
    connectionHealthy,
    isUsingFallback: !!pollingIntervalRef.current
  };
}
