// src/hooks/useRealtimeOrders.ts (C√≥digo COMPLETO e FINAL)

import { useEffect, useState } from 'react';
import { useSupabase } from '@/contexts/SupabaseContext';
import { RealtimePostgresChangesPayload } from '@supabase/supabase-js';

// **NOTA:** Substitua 'any' pelo tipo real da sua linha da tabela 'orders'
type OrderRow = { id: number; customer_name: string; status: string; /* ... outros campos */ }; 

// Define o tipo para os dados de mudan√ßa (adapte conforme sua tabela)
type OrderPayload = RealtimePostgresChangesPayload<OrderRow>;

export const useRealtimeOrders = () => {
    // Inclui todas as informa√ß√µes do contexto para logs/debug
    const { realtimeChannel, realtimeAuthCounter, connectionHealthy, realtimeEventLogs, downloadRealtimeLogs } = useSupabase();
    
    const [lastOrderEvent, setLastOrderEvent] = useState<OrderPayload | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(true);

    useEffect(() => {
        // 1. Condi√ß√£o de Bloqueio: Se o canal n√£o est√° dispon√≠vel (Provider ainda est√° inicializando/quebrando), 
        // apenas define loading e aguarda.
        if (!realtimeChannel) {
            setIsLoading(true);
            return;
        }

        // 2. Condi√ß√£o de Aguardar: Se a conex√£o est√° saud√°vel, prosseguimos. Caso contr√°rio, 
        // o Provider far√° a reconex√£o. O hook espera.
        if (!connectionHealthy) {
             setIsLoading(true);
             return;
        }
        
        // --- HANDLER DE EVENTOS ---
        const handleOrderChanges = (payload: OrderPayload) => {
            console.log(`[RT-ORDERS] üîî Evento de Pedido Recebido: ${payload.eventType}`);
            setLastOrderEvent(payload);
        };
        
        console.log(`[RT-HOOK] ‚öìÔ∏è Adicionando listeners espec√≠ficos para orders (Auth Counter: ${realtimeAuthCounter})`);
        
        // 3. Adiciona o listener
        const listener = realtimeChannel.on(
            'postgres_changes',
            { event: '*', schema: 'public', table: 'orders' },
            handleOrderChanges
        );

        setIsLoading(false);

        // --- FUN√á√ÉO DE LIMPEZA ---
        return () => {
            console.log('[RT-HOOK] üßπ Removendo listeners espec√≠ficos para orders');
            
            // Usamos a refer√™ncia 'listener' (que √© o pr√≥prio canal) e verificamos a fun√ß√£o 'off'
            if (listener && typeof listener.off === 'function') {
                try {
                    listener.off(
                        'postgres_changes',
                        { event: '*', schema: 'public', table: 'orders' },
                        handleOrderChanges
                    );
                    console.log('[RT-HOOK] ‚úÖ Listeners de orders removidos com seguran√ßa.');
                } catch (error) {
                    console.error('[RT-HOOK-CLEANUP] Falha ao remover listener de orders:', error);
                }
            } else {
                 console.warn('[RT-HOOK-CLEANUP] ‚ö†Ô∏è N√£o foi poss√≠vel remover listener: fun√ß√£o .off ausente no canal.');
            }
        };
    // Re-roda sempre que o canal muda, a sa√∫de muda, ou o contador de Auth muda (ap√≥s refresh/swap)
    }, [realtimeChannel, connectionHealthy, realtimeAuthCounter]); 

    return { 
        lastOrderEvent,
        isLoading,
        isRealtimeConnected: connectionHealthy,
        authSwapCount: realtimeAuthCounter,
        capturedLogs: realtimeEventLogs, // Incluindo logs para debug no componente
        downloadLogs: downloadRealtimeLogs,
    };
};
